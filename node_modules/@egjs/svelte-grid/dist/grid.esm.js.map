{"version":3,"file":"grid.esm.js","sources":["../src/Grid.svelte","../src/Grid.js","../src/grids/MasonryGrid.js","../src/grids/JustifiedGrid.js","../src/grids/FrameGrid.js","../src/grids/PackingGrid.js"],"sourcesContent":["<script>\n  /**\n   * egjs-grid\n   * Copyright (c) 2021-present NAVER Corp.\n   * MIT license\n   */\n  import { onMount, beforeUpdate, createEventDispatcher, onDestroy, afterUpdate } from \"svelte\";\n  import { GRID_EVENTS } from \"@egjs/grid\";\n  export let GridClass;\n\n  const dispatch = createEventDispatcher();\n  let container;\n  let grid;\n  let isFirstMount = false;\n  let attributes = {};\n\n  function updateAttributes() {\n    attributes = { ...$$props };\n\n    const defaultOptions = GridClass.defaultOptions;\n\n    delete attributes[\"GridClass\"];\n    for (const name in defaultOptions) {\n      delete attributes[name];\n    }\n  }\n\n  beforeUpdate(() => {\n    updateAttributes();\n    if (!grid) {\n      return;\n    }\n\n    const propertyTypes = GridClass.propertyTypes;\n    for (const name in propertyTypes) {\n      if (name in $$props) {\n        grid[name] = $$props[name];\n      }\n    }\n  });\n  onMount(() => {\n    const defaultOptions = GridClass.defaultOptions;\n    const options = {};\n\n    for (const name in defaultOptions) {\n      if (name in $$props) {\n        options[name] = $$props[name];\n      }\n    }\n\n    grid = new GridClass(container, options);\n\n    GRID_EVENTS.forEach((name) => {\n      grid.on(name, e => {\n        dispatch(name, e);\n      });\n    });\n    grid.renderItems();\n  });\n  afterUpdate(() => {\n    if (isFirstMount) {\n      isFirstMount = false;\n      return;\n    }\n    const propertyTypes = GridClass.propertyTypes;\n\n    for (const name in propertyTypes) {\n      if (name in $$props) {\n        grid[name] = $$props[name];\n      }\n    }\n    grid.syncElements();\n  });\n  onDestroy(() => {\n    grid && grid.destroy();\n  });\n  export function getInstance() {\n    return grid;\n  }\n</script>\n\n<div bind:this={container} {...attributes}>\n  <slot />\n</div>\n","/**\n * egjs-grid\n * Copyright (c) 2021-present NAVER Corp.\n * MIT license\n */\nimport Grid from './Grid.svelte';\nimport { GRID_METHODS } from '@egjs/grid';\n\nexport default /*#__PURE__*/ (() => {\n  const prototype = Grid.prototype;\n\n  if (prototype) {\n    GRID_METHODS.forEach(name => {\n      if (name in prototype) {\n        return;\n      }\n      prototype[name] = function (...args) {\n        const self = this.getInstance();\n        const result = self[name](...args);\n\n        if (result === self) {\n          return this;\n        } else {\n          return result;\n        }\n      };\n    });\n  }\n  return Grid;\n})();\n","import Grid from \"../Grid.svelte\";\nimport { MasonryGrid as GridClass } from \"@egjs/grid\";\n\nlet SvelteMasonryGrid;\n\nif (typeof Grid === \"object\") {\n  SvelteMasonryGrid = Grid;\n} else {\n  SvelteMasonryGrid = class SvelteMasonryGrid extends Grid {\n    constructor(options) {\n      options.props.GridClass = GridClass;\n      super(options);\n    }\n  }\n}\nexport { SvelteMasonryGrid as MasonryGrid };\n","import Grid from \"../Grid.svelte\";\nimport { JustifiedGrid as GridClass } from \"@egjs/grid\";\n\nlet SvelteJustifiedGrid;\n\nif (typeof Grid === \"object\") {\n  SvelteJustifiedGrid = Grid;\n} else {\n  SvelteJustifiedGrid = class SvelteJustifiedGrid extends Grid {\n    constructor(options) {\n      options.props.GridClass = GridClass;\n      super(options);\n    }\n  }\n}\nexport { SvelteJustifiedGrid as JustifiedGrid };\n","import Grid from \"../Grid.svelte\";\nimport { FrameGrid as GridClass } from \"@egjs/grid\";\n\nlet SvelteFrameGrid;\n\nif (typeof Grid === \"object\") {\n  SvelteFrameGrid = Grid;\n} else {\n  SvelteFrameGrid = class SvelteFrameGrid extends Grid {\n    constructor(options) {\n      options.props.GridClass = GridClass;\n      super(options);\n    }\n  }\n}\nexport { SvelteFrameGrid as FrameGrid };\n","import Grid from \"../Grid.svelte\";\nimport { PackingGrid as GridClass } from \"@egjs/grid\";\n\nlet SveltePackingGrid;\n\nif (typeof Grid === \"object\") {\n  SveltePackingGrid = Grid;\n} else {\n  SveltePackingGrid = class SveltePackingGrid extends Grid {\n    constructor(options) {\n      options.props.GridClass = GridClass;\n      super(options);\n    }\n  }\n}\nexport { SveltePackingGrid as PackingGrid };\n"],"names":["ctx","GridClass","dispatch","createEventDispatcher","container","grid","attributes","updateAttributes","$$props","defaultOptions","name","beforeUpdate","propertyTypes","onMount","options","GRID_EVENTS","forEach","on","e","renderItems","afterUpdate","syncElements","onDestroy","destroy","getInstance","prototype","Grid","GRID_METHODS","args","self","result","SvelteMasonryGrid","constructor","props","SvelteJustifiedGrid","SvelteFrameGrid","SveltePackingGrid"],"mappings":"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"}